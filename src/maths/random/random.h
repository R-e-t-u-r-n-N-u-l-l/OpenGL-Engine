#pragma once

#include <math.h>
#include "../../utilities/time.h"

namespace engine {

	/*
		Class: Random

		A class that generates pseudo random numbers using a linear congruential generator
		Variables used come from 'Numerical Recipes'

	*/
	class Random {

	private:
		/*	
			Variable: m_seed

			The current seed

		*/
		long m_seed;

		/*
			Variable: a

			The multiplier

		*/
		static const unsigned long a = 1664525;

		/*
			Variable: c

			The increment

		*/
		static const unsigned long c = 1013904223;

		/*
			Variable: m

			The modulus

		*/
		static const unsigned long m = 2147483648;

	public:
		/*
			Constructor: Random

			Initializes the random number generator with a given seed

			Parameters:

				seed - Optional seed value for the noise, if unspecified it generates a random seed

		*/
		Random(int seed = -1);

		/*
			Function: Next random value

			Generates the next random value with the linear congruential generator and current seed

			Returns:

				A pseudo random value between 0 and 1

		*/
		float next();

		/*
			Function: Get current Seed

			Gets the current seed

			Returns:

				The current seed

		*/
		long getSeed() const;
		

		// STATIC FUNCTIONS

		/*
			Function: Next random value

			Generates a random value with the linear congruential generator and the given seed

			Parameters:

				seed - Seed value for the pseudo random number

			Returns:

				A pseudo random value between 0 and 1
				
		*/
		static float next(long seed);

		/*
			Function: Next seed

			Generates the seed which would be generated by the linear congruential generator and the given seed

			Parameters:

				seed - Seed value for the next seed

			Returns:

				The seed that would be generated by the linear congruential generator

		*/
		static long nextSeed(long seed);
	};
}
